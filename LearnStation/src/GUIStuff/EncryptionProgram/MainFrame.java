package GUIStuff.EncryptionProgram;

import GUIStuff.EncryptionProgram.Exceptions.EmptyEncryptionKeyException;
import GUIStuff.EncryptionProgram.Exceptions.ValidTextException;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author besic
 */
public class MainFrame extends javax.swing.JFrame {

    private Integer lastShiftValue = null;
    private String lastVigenereValue = null;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setTitle("Encryption Program");

        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int option = JOptionPane.showConfirmDialog(
                        MainFrame.this,
                        "Are you sure you want to close the application?",
                        "Close Confirmation",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE
                );

                if (option == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        });
    }

    private void updateCaeserView() {
        caeserEncryptedContentList.setListData(EncryptedTexts.
                caeserListToArray());
        caeserDecryptedContentList.setListData(DecryptedTexts.
                caeserListToArray());
    }

    private void updateVigenereView() {
        vigenereEncryptedContentList.setListData(EncryptedTexts.
                vigenereListToArray());
        vigenereDecryptedContentList.setListData(DecryptedTexts.
                vigenereListToArray());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        caeserPanel = new javax.swing.JPanel();
        caeserLabel = new javax.swing.JLabel();
        whatToEncryptLabel1 = new javax.swing.JLabel();
        caeserEncrytpedContentTextField = new javax.swing.JTextField();
        shiftLabel = new javax.swing.JLabel();
        shiftTextField = new javax.swing.JTextField();
        encryptCaeserButton = new javax.swing.JButton();
        decryptCaeserButton = new javax.swing.JButton();
        encryptedTextLabel1 = new javax.swing.JLabel();
        decryptedTextLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        caeserDecryptedContentList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        caeserEncryptedContentList = new javax.swing.JList();
        vigenerePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vigenereDecryptedContentList = new javax.swing.JList();
        decryptedTextLabel2 = new javax.swing.JLabel();
        encryptVigenereButton = new javax.swing.JButton();
        decryptVigenereButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        vigenereEncryptedContentList = new javax.swing.JList();
        vigenereEncrytpedContentTextField = new javax.swing.JTextField();
        vigenereKeyLabel = new javax.swing.JLabel();
        whatToEncryptLabel2 = new javax.swing.JLabel();
        vigenereLabel = new javax.swing.JLabel();
        vigenereKeyTextField = new javax.swing.JTextField();
        encryptedTextLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        caeserPanel.setBackground(new java.awt.Color(204, 204, 255));

        caeserLabel.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        caeserLabel.setText("Caesar");
        caeserLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        whatToEncryptLabel1.setText("Write the text you want to encrypt here :");

        caeserEncrytpedContentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caeserEncrytpedContentTextFieldActionPerformed(evt);
            }
        });

        shiftLabel.setText("Shift: ");

        shiftTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftTextFieldActionPerformed(evt);
            }
        });

        encryptCaeserButton.setText("Encrypt");
        encryptCaeserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptCaeserButtonActionPerformed(evt);
            }
        });

        decryptCaeserButton.setText("Decrypt");
        decryptCaeserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptCaeserButtonActionPerformed(evt);
            }
        });

        encryptedTextLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        encryptedTextLabel1.setText("Encrypted Text");

        decryptedTextLabel1.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        decryptedTextLabel1.setText("Decrypted Text");

        caeserDecryptedContentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        caeserDecryptedContentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                caeserDecryptedContentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(caeserDecryptedContentList);

        caeserEncryptedContentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        caeserEncryptedContentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                caeserEncryptedContentListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(caeserEncryptedContentList);

        javax.swing.GroupLayout caeserPanelLayout = new javax.swing.GroupLayout(caeserPanel);
        caeserPanel.setLayout(caeserPanelLayout);
        caeserPanelLayout.setHorizontalGroup(
            caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caeserPanelLayout.createSequentialGroup()
                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(caeserPanelLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(caeserPanelLayout.createSequentialGroup()
                                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(encryptedTextLabel1)
                                    .addComponent(whatToEncryptLabel1))
                                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(caeserPanelLayout.createSequentialGroup()
                                        .addGap(228, 228, 228)
                                        .addComponent(decryptedTextLabel1))
                                    .addGroup(caeserPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(caeserEncrytpedContentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(shiftLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(shiftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(encryptCaeserButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(decryptCaeserButton)))
                                .addGap(0, 0, 0))
                            .addComponent(caeserLabel)))
                    .addGroup(caeserPanelLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(109, 109, 109)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 169, Short.MAX_VALUE))
        );
        caeserPanelLayout.setVerticalGroup(
            caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caeserPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(caeserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(whatToEncryptLabel1)
                    .addComponent(caeserEncrytpedContentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shiftLabel)
                    .addComponent(shiftTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptCaeserButton)
                    .addComponent(decryptCaeserButton))
                .addGap(30, 30, 30)
                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptedTextLabel1)
                    .addComponent(decryptedTextLabel1))
                .addGap(18, 18, 18)
                .addGroup(caeserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        vigenerePanel.setBackground(new java.awt.Color(255, 153, 153));

        vigenereDecryptedContentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        vigenereDecryptedContentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vigenereDecryptedContentListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(vigenereDecryptedContentList);

        decryptedTextLabel2.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        decryptedTextLabel2.setText("Decrypted Text");

        encryptVigenereButton.setText("Encrypt");
        encryptVigenereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptVigenereButtonActionPerformed(evt);
            }
        });

        decryptVigenereButton.setText("Decrypt");
        decryptVigenereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptVigenereButtonActionPerformed(evt);
            }
        });

        vigenereEncryptedContentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        vigenereEncryptedContentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vigenereEncryptedContentListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(vigenereEncryptedContentList);

        vigenereEncrytpedContentTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vigenereEncrytpedContentTextFieldActionPerformed(evt);
            }
        });

        vigenereKeyLabel.setText("Viginere Key: ");

        whatToEncryptLabel2.setText("Write the text you want to encrypt here :");

        vigenereLabel.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        vigenereLabel.setText("Vigènere");

        vigenereKeyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vigenereKeyTextFieldActionPerformed(evt);
            }
        });

        encryptedTextLabel2.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        encryptedTextLabel2.setText("Encrypted Text");

        javax.swing.GroupLayout vigenerePanelLayout = new javax.swing.GroupLayout(vigenerePanel);
        vigenerePanel.setLayout(vigenerePanelLayout);
        vigenerePanelLayout.setHorizontalGroup(
            vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vigenerePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encryptVigenereButton)
                .addGap(18, 18, 18)
                .addComponent(decryptVigenereButton)
                .addGap(29, 29, 29))
            .addGroup(vigenerePanelLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(vigenereLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(vigenerePanelLayout.createSequentialGroup()
                    .addGap(93, 93, 93)
                    .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(vigenerePanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(131, 131, 131)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(vigenerePanelLayout.createSequentialGroup()
                            .addComponent(whatToEncryptLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(vigenereEncrytpedContentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(vigenereKeyLabel)
                            .addGap(18, 18, 18)
                            .addComponent(vigenereKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(vigenerePanelLayout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addComponent(encryptedTextLabel2)
                            .addGap(249, 249, 249)
                            .addComponent(decryptedTextLabel2)))
                    .addContainerGap(226, Short.MAX_VALUE)))
        );
        vigenerePanelLayout.setVerticalGroup(
            vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vigenerePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(vigenereLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptVigenereButton)
                    .addComponent(encryptVigenereButton))
                .addContainerGap(378, Short.MAX_VALUE))
            .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(vigenerePanelLayout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(vigenereKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(whatToEncryptLabel2)
                        .addComponent(vigenereKeyLabel)
                        .addComponent(vigenereEncrytpedContentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(encryptedTextLabel2)
                        .addComponent(decryptedTextLabel2))
                    .addGap(18, 18, 18)
                    .addGroup(vigenerePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(27, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(caeserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(vigenerePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(caeserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(vigenerePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void caeserEncrytpedContentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caeserEncrytpedContentTextFieldActionPerformed

    }//GEN-LAST:event_caeserEncrytpedContentTextFieldActionPerformed

    private void encryptCaeserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptCaeserButtonActionPerformed
        try {
            String nonEncryptedContent = caeserEncrytpedContentTextField.getText();
            String shiftTextFieldValue = shiftTextField.getText();

            if (!shiftTextFieldValue.isBlank()) {
                Integer shiftValue = null;

                // Need second try catch, to catch user input
                try {
                    shiftValue = Integer.valueOf(shiftTextField.getText());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this,
                            "Please enter a valid numeric shift value!",
                            "Invalid Input",
                            JOptionPane.ERROR_MESSAGE);
                }

                if (shiftValue != null) {
                    // ******** CAESER ENCRYPTION ********
                    System.out.println("******** CAESER ENCRYPTION ********");
                    String encryptedContent = Cryptor.encryptCaesar(
                            nonEncryptedContent, shiftValue);

                    EncryptedTexts.addCaeserEncryptedText(encryptedContent);
                    System.out.println(EncryptedTexts.caeserListToString()
                            + "\n");
                    lastShiftValue = shiftValue;
                }
            }

            updateCaeserView();
        } catch (ValidTextException ex) {
            System.out.println(ex);
        }

    }//GEN-LAST:event_encryptCaeserButtonActionPerformed

    private void shiftTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftTextFieldActionPerformed

    }//GEN-LAST:event_shiftTextFieldActionPerformed

    private void decryptCaeserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptCaeserButtonActionPerformed
        int selectedIndex = caeserEncryptedContentList.getSelectedIndex();

        // Check if an encrypted text exists to decrypt
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select an encrypted text to decrypt!",
                    "Selection Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String encryptedText = EncryptedTexts.getCaeserEncryptedText(
                selectedIndex);

        /* Check if the user encrypted a text before accessing the shift 
        value of the encryted text */
        if (lastShiftValue == null) {
            JOptionPane.showMessageDialog(this,
                    "No shift value found. Please encrypt a text first!",
                    "Shift Value Missing",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Now check the shift value and if it's a number
        try {
            int shiftValue = Integer.parseInt(shiftTextField.getText());

            /* Check if shift value is same as shift value after the text was 
            encrypted */
            if (!lastShiftValue.equals(shiftValue)) {
                JOptionPane.showMessageDialog(this,
                        "The shift value must match the one used during "
                        + "encryption (" + lastShiftValue + ").",
                        "Shift Mismatch",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // ******** CAESER DECRYPTION ********
            System.out.println("******** CAESER DECRYPTION ********");
            String decryptedContent = Cryptor.decryptCaesar(encryptedText,
                    shiftValue);
            DecryptedTexts.addCaeserDecryptedText(decryptedContent);
            System.out.println(DecryptedTexts.caeserListToString()
                    + "\n");
            updateCaeserView();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,
                    "Please enter a valid numeric shift value!",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_decryptCaeserButtonActionPerformed

    private void caeserEncryptedContentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_caeserEncryptedContentListValueChanged

    }//GEN-LAST:event_caeserEncryptedContentListValueChanged

    private void caeserDecryptedContentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_caeserDecryptedContentListValueChanged

    }//GEN-LAST:event_caeserDecryptedContentListValueChanged

    private void vigenereKeyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vigenereKeyTextFieldActionPerformed

    }//GEN-LAST:event_vigenereKeyTextFieldActionPerformed

    private void vigenereEncrytpedContentTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vigenereEncrytpedContentTextFieldActionPerformed

    }//GEN-LAST:event_vigenereEncrytpedContentTextFieldActionPerformed

    private void vigenereEncryptedContentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vigenereEncryptedContentListValueChanged

    }//GEN-LAST:event_vigenereEncryptedContentListValueChanged

    private void vigenereDecryptedContentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vigenereDecryptedContentListValueChanged

    }//GEN-LAST:event_vigenereDecryptedContentListValueChanged

    private void encryptVigenereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptVigenereButtonActionPerformed
        String nonEncryptedContent = vigenereEncrytpedContentTextField.getText();
        String vigenereKeyTextFieldValue = vigenereKeyTextField.getText();

        if (!vigenereKeyTextFieldValue.isBlank()) {

            // ******** VIGENERE ENCRYPTION ********
            System.out.println("******** VIGENERE ENCRYPTION ********");
            String vigenereKeyValue = null;
            String encryptedViginereText = null;

            try {
                vigenereKeyValue = vigenereKeyTextField.getText();
                encryptedViginereText = Cryptor.encryptVigenere(nonEncryptedContent,
                        vigenereKeyTextFieldValue);
            } catch (EmptyEncryptionKeyException ex) {
                System.out.println(ex);
            }
            EncryptedTexts.addVigenereEncryptedText(
                    encryptedViginereText);
            System.out.println(EncryptedTexts.vigenereListToString()
                    + "\n");
            lastVigenereValue = vigenereKeyValue;
            updateVigenereView();
        }
    }//GEN-LAST:event_encryptVigenereButtonActionPerformed

    private void decryptVigenereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptVigenereButtonActionPerformed
        int selectedIndex = vigenereEncryptedContentList.getSelectedIndex();

        // Check if an encrypted text exists to decrypt
        if (selectedIndex == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select an encrypted text to decrypt!",
                    "Selection Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        String encryptedText = EncryptedTexts.getVigenereEncryptedText(
                selectedIndex);

        String vigenereKeyValue = vigenereKeyTextField.getText();

        /* Check if shift value is same as shift value after the text was 
            encrypted */
        if (!lastVigenereValue.equals(vigenereKeyValue)) {
            JOptionPane.showMessageDialog(this,
                    "The vigenere key must match the one used during "
                    + "encryption (" + lastVigenereValue + ").",
                    "Viginere Key Mismatch",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // ******** VIGINERE DECRYPTION ********
        System.out.println("******** VIGINERE DECRYPTION ********");
        String decryptedContent = Cryptor.decryptVigenere(encryptedText,
                vigenereKeyValue);
        DecryptedTexts.addVigenereDecryptedText(decryptedContent);
        System.out.println(DecryptedTexts.vigenereListToString()
                + "\n");
        updateVigenereView();

    }//GEN-LAST:event_decryptVigenereButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList caeserDecryptedContentList;
    private javax.swing.JList caeserEncryptedContentList;
    private javax.swing.JTextField caeserEncrytpedContentTextField;
    private javax.swing.JLabel caeserLabel;
    private javax.swing.JPanel caeserPanel;
    private javax.swing.JButton decryptCaeserButton;
    private javax.swing.JButton decryptVigenereButton;
    private javax.swing.JLabel decryptedTextLabel1;
    private javax.swing.JLabel decryptedTextLabel2;
    private javax.swing.JButton encryptCaeserButton;
    private javax.swing.JButton encryptVigenereButton;
    private javax.swing.JLabel encryptedTextLabel1;
    private javax.swing.JLabel encryptedTextLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel shiftLabel;
    private javax.swing.JTextField shiftTextField;
    private javax.swing.JList vigenereDecryptedContentList;
    private javax.swing.JList vigenereEncryptedContentList;
    private javax.swing.JTextField vigenereEncrytpedContentTextField;
    private javax.swing.JLabel vigenereKeyLabel;
    private javax.swing.JTextField vigenereKeyTextField;
    private javax.swing.JLabel vigenereLabel;
    private javax.swing.JPanel vigenerePanel;
    private javax.swing.JLabel whatToEncryptLabel1;
    private javax.swing.JLabel whatToEncryptLabel2;
    // End of variables declaration//GEN-END:variables
}
